#include "Pnxml.h"
#include<unistd.h>
#include<stdio.h>
#include<"/home/share/dev_app/NetSdkApp.h">
// static int recieved=0;
extern bool GroupBusy;
extern bool BreakDown;

static char xml_buffer[XMLMAXLEN];

CPnxml::CPnxml()
{
    memset(xml_buffer, '\0', sizeof(xml_buffer));
    m_pxmlbuffer = (char*)xml_buffer;

    callback_send =  NULL;
}

CPnxml::~CPnxml()
{
}

int CPnxml::PN_Xml_Init()
{
    m_Manage.PN_Manage_Init();
    m_Manage.SetCallback(callback_send,m_inst);
    return PN_ERR_OK;
}

int CPnxml::PN_Xml_Release()
{
    m_Manage.PN_Manage_Release();
    return PN_ERR_OK;
}

int CPnxml::PN_Xml_Parse(char *msg)
{
    int err,err1;
    TiXmlDocument XmlDoc;
    TiXmlNode* pNode_root = NULL;
    TiXmlNode* pNode_child = NULL;
    TiXmlElement *spElement = NULL;
    TiXmlElement *RootElement = NULL;
    TiXmlElement *countElement = NULL;
    TiXmlElement *devsElement = NULL;
    TiXmlElement *devElement = NULL;
    TiXmlElement *devidElement = NULL;
    TiXmlElement *nameElement = NULL;
    TiXmlElement *phonenumElement = NULL;
    const char * szXmlVaule = NULL;
    pn_media_invite_info media_invite_info;
    pn_audio_invite_info audio_invite_info;
    pn_work_order_info work_order_info;
    // pn_work_task_info work_task_info;
    // pn_work_task_acc_car work_task_acc_car;
    // pn_group_busy_invite_info group_busy_invite_info;
    pn_ftp_info ftp_info;
    // char type_info[2];
    // char timeInfo[20];
    char temp_cnt[2];
    int count=0;

    //set time
    if(strncmp(msg,"Time",4) == 0)
    {
        /*What we should do is decode: Time20120229T181141 -> [MMDDhhmm[[CC]YY][.ss]]*/
        char tmp[21];
        memset(tmp,'\0',sizeof(tmp));
        strcpy(tmp, "date ");
        strncat(tmp,msg+8,4);
        strncat(tmp,msg+13,4);
        strncat(tmp,msg+4,4);
        strcat(tmp,".");
        strncat(tmp,msg+17,2);
        system(tmp);
        system("hwclock -w");
        printf("\nHardware clock and system clock have changed to %s.\n", msg+4);
        return PN_ERR_OK;
    }
    XmlDoc.Parse(msg);

    // receive sip msg,if sip_app restart,judge OnBusy
    if(GroupBusy == false)
    {
        //parse the msg from sip_app:msg=callbye,then hang up
		/*if(strncmp(msg,"callbye",8) == 0)
        {
            debugstring("In the callbye Xml~~~~~~~~~~~~~~~~~~`````\n\n");
            err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_BYE, (void*)&audio_invite_info);
            m_Manage.PN_Manage_Control(MODULE_MEDIA, PN_CFGID_MEDIA_SIPCALL_STOP,NULL);
            return err;
        }*/
        //parse the msg=callclean,then send message to sip_app
        if(strncmp(msg,"callclean",8) == 0)
        {
            debugstring("In the callclean Xml~~~~~~~~~~~~~~~~~~`````\n\n");
            err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_BYE, (void*)&audio_invite_info);
            m_Manage.PN_Manage_Control(MODULE_MEDIA, PN_CFGID_MEDIA_SIPCALL_STOP,NULL);
            SipCall_Bye_Clean_XML_Send(audio_invite_info.from_number,audio_invite_info.to_number);

            return err;
        }
    }

    // receive the login in response
    if ((pNode_root = XmlDoc.FirstChild("login_response")) != NULL)
    {
        printf("login response!!!!!!!!!!!!!!\n");
        pNode_child =pNode_root->FirstChildElement("time");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            err = m_Manage.PN_Manage_Control(MODULE_MEDIA,PN_CFGID_MEDIA_LOGIN_STATUS,NULL);
        return err;
    }
	//receive group response 
    if ((pNode_root = XmlDoc.FirstChild("subscribe_grouppn_response")) != NULL)
    {

        pNode_child = pNode_root->FirstChildElement("code");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.sipcall_code,szXmlVaule);

        pNode_child =pNode_child->NextSibling("group_num");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.to_number,szXmlVaule);

        pNode_child =pNode_child->NextSibling("peer");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.connect_value,szXmlVaule);
		
        pNode_child =pNode_child->NextSibling("magic");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();

        pNode_child =pNode_child->NextSibling("level");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.level,szXmlVaule);
        err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_GROUP_SIPCALL_INVITE, (void*)&audio_invite_info);
        if(strcmp(audio_invite_info.to_number,"0")!=0)
        {
            if(err == PN_ERR_OK) 
                err = m_Manage.PN_Manage_Control(MODULE_MEDIA,PN_CFGID_MEDIA_GROUP_SIPCALL_START,NULL);
            else
                err = m_Manage.PN_Manage_Control(MODULE_MEDIA, PN_CFGID_MEDIA_SIPCALL_STOP,NULL);
        }
        else
            BreakDown = true;
        return err;
	}

    if ((pNode_root = XmlDoc.FirstChild("change_dev_group")) != NULL)
    {

        pNode_child = pNode_root->FirstChildElement("dev_id");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();

        pNode_child =pNode_child->NextSibling("new_groupnum");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(strcmp(szXmlVaule,"0") == 0)
        {
            debugstring("00000000000000000000000\n");
            BreakDown = true;
            err = m_Manage.PN_Manage_Control(MODULE_MEDIA,PN_CFGID_MEDIA_BREAKDOWN_STOP,NULL);
        }
        else{
            BreakDown = false;
            debugstring("1111111111111111111111\n");
            err = m_Manage.PN_Manage_Control(MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_STOP,NULL);
        }
        XmlGroupChangeAck();
    }

    // receive the Video bye
    if ((pNode_root = XmlDoc.FirstChild("recvaddr")) != NULL)
    {
        pNode_child =pNode_root->FirstChildElement("peer");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(media_invite_info.connect_value,szXmlVaule);

        XmlMediaByeAck(&media_invite_info,m_pxmlbuffer);
        err = m_Manage.PN_Manage_Control(MODULE_MEDIA,PN_CFGID_MEDIA_VIDEO_STOP,NULL);
        if(err==0){
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        return err;
    }

    // receive the media invite
    if ((pNode_root = XmlDoc.FirstChild("media")) != NULL)
    {
        err1=m_Manage.PN_Manage_Control(MODULE_MEDIA, PN_CFGID_MEDIA_VIDEO_STOP,NULL);
        if(err1!=0)
        {
            debugstring("video_invite step one error!");
            return err1;
        }

        pNode_child = pNode_root->FirstChildElement("resolution");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(media_invite_info.resolution_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("video");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(media_invite_info.video_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("audio");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(media_invite_info.audio_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("kbps");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(media_invite_info.kbps_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("peer");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(media_invite_info.connect_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("mode");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(media_invite_info.mode_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("magic");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(media_invite_info.magic_value,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig (MODULE_MEDIA,PN_CFGID_MEDIA_VIDEO_INVITE, (void*)&media_invite_info);
        if(err==PN_ERR_OK)
        {
            strcpy(media_invite_info.connect_value,"192.168.188.210 UDP 6060");
            XmlMediaInviteAck(&media_invite_info,m_pxmlbuffer);

            err = m_Manage.PN_Manage_Control(MODULE_MEDIA,PN_CFGID_MEDIA_VIDEO_START,NULL);

            if(err==0)
            {
                callback_send(OK,m_pxmlbuffer,m_inst);
            }
            else
            {
                debugstring("--------------------------------------new rtp err!");
            }
        }
        return err;
    }
#if  0
    if (strcmp((RootElement=XmlDoc.RootElement())->Value(),"dev_speechpn_notify")==0)                                                        
    {                          
        debugstring("In dev_speechpn_notify");
        if(strcmp((countElement=RootElement->FirstChildElement())->Value(),"count")==0)                                                
        {                                               
            if(strcmp(countElement->FirstChild()->Value(),"0")==0)                                                                         
            {                                                                                                                              
                pn_dev_call_info dev_call_info;                                                                                            

                dev_call_info.count=count;                                                                                                 
                err=m_Manage.PN_Manage_Setconfig(MODULE_WORK_ORDER,PN_CFGID_DEV_CALL_INFO_RESPONSE,(void*)&dev_call_info);                 
                if(err==PN_ERR_OK)                                                                                                         
                {                                                                                                                          
                XmlDevSpeechNotifyAck(m_pxmlbuffer);                                                                                   
                callback_send(OK,m_pxmlbuffer,m_inst);                                                                                 
                }                                                                                                                          
                return err;                                                                                                                
            }                                                                                                                              
            else{                                                                                                                          
                strcpy(temp_cnt,countElement->FirstChild()->Value());                                                                      
                count=atoi(temp_cnt);       
                debugint(count);                
                if(count > 5 && recieved==0)                                                                                                              
                {                                                                                                                          
                    FILE* fp;
                    fp=fopen("/mnt/call_info/ningbo.txt","w");
                    if(fp==NULL)
                        debugstring("Failed to open file!");
                    fclose(fp);
                    pn_dev_call_info dev_call_info[5];                                                                                     
                    debugstring("in this way==========================================");

                    dev_call_info[0].count=5;
                    if(strcmp((devsElement=countElement->NextSiblingElement())->Value(),"devs")==0)                                        
                    {                                                                                                                      
                        if(strcmp((devElement=devsElement->FirstChildElement())->Value(),"dev")==0)                                    
                        {                                                                                                              
                            devidElement=devElement->FirstChildElement();                                                              
                            strcpy(dev_call_info[0].dev_id,devidElement->FirstChild()->Value());                                          
                            printf("dev_id0=%s\n",dev_call_info[0].dev_id);
                            nameElement=devidElement->NextSiblingElement();                                                              
                            strcpy(dev_call_info[0].name,nameElement->FirstChild()->Value());    
                            printf("name0=%s\n",dev_call_info[0].name);
                            phonenumElement=nameElement->NextSiblingElement();                                                         
                            strcpy(dev_call_info[0].phone_num,phonenumElement->FirstChild()->Value());                                 
                            printf("phone0=%s\n",dev_call_info[0].phone_num);
                        }                                                                                                              
                        for(int i=1;i<5;i++)                                                                                           
                        { 
                            if(strcmp((devElement=devElement->NextSiblingElement())->Value(),"dev")==0)                                    
                            {                                                                                                              
                                devidElement=devElement->FirstChildElement();                                                              
                                strcpy(dev_call_info[i].dev_id,devidElement->FirstChild()->Value());                                          
                                printf("dev_id%d=%s\n",i,dev_call_info[i].dev_id);
                                nameElement=devidElement->NextSiblingElement();                                                              
                                strcpy(dev_call_info[i].name,nameElement->FirstChild()->Value());    
                                printf("name%d=%s\n",i,dev_call_info[i].name);
                                phonenumElement=nameElement->NextSiblingElement();                                                         
                                strcpy(dev_call_info[i].phone_num,phonenumElement->FirstChild()->Value());                                 
                                printf("phone%d=%s\n",i,dev_call_info[i].phone_num);
                            }                                                                                                              
                            debugstring("In the for......");
                        }                                                                                
                        debugstring("parse finished!!!!");
                    }
                    recieved=1;                    
                    debugint(recieved);
                    err=m_Manage.PN_Manage_Setconfig(MODULE_WORK_ORDER,PN_CFGID_DEV_CALL_INFO_RESPONSE,(void*)&dev_call_info);                 
                }                                                                                                                          
                else if(count > 5 && recieved==1)
                {                                                                                                                          
                    int cnt=count-5;                    
                    pn_dev_call_info dev_call_info[cnt];                                                                                     

                    dev_call_info[0].count=cnt;
                    debugint(cnt);
                    if(strcmp((devsElement=countElement->NextSiblingElement())->Value(),"devs")==0)                                        
                    {                                                                                                                      
                        if(strcmp((devElement=devsElement->FirstChildElement())->Value(),"dev")==0)                                    
                        {                                                                                                              
                            devidElement=devElement->FirstChildElement();                                                              
                            strcpy(dev_call_info[0].dev_id,devidElement->FirstChild()->Value());                                          
                            printf("dev_id0=%s\n",dev_call_info[0].dev_id);
                            nameElement=devidElement->NextSiblingElement();                                                              
                            strcpy(dev_call_info[0].name,nameElement->FirstChild()->Value());    
                            printf("name0=%s\n",dev_call_info[0].name);
                            phonenumElement=nameElement->NextSiblingElement();                                                         
                            strcpy(dev_call_info[0].phone_num,phonenumElement->FirstChild()->Value());                                 
                            printf("phone0=%s\n",dev_call_info[0].phone_num);
                        }
                                                
                        for(int i=1;i<cnt;i++)                                                                                           
                        {                            
                            if(strcmp((devElement=devElement->NextSiblingElement())->Value(),"dev")==0)                                    
                            {                                                                                                              
                                devidElement=devElement->FirstChildElement();                                                              
                                strcpy(dev_call_info[i].dev_id,devidElement->FirstChild()->Value());                                          
                                printf("dev_id%d=%s\n",i,dev_call_info[i].dev_id);
                                nameElement=devidElement->NextSiblingElement();                                                              
                                strcpy(dev_call_info[i].name,nameElement->FirstChild()->Value());    
                                printf("name%d=%s\n",i,dev_call_info[i].name);
                                phonenumElement=nameElement->NextSiblingElement();                                                         
                                strcpy(dev_call_info[i].phone_num,phonenumElement->FirstChild()->Value());                                 
                                printf("phone%d=%s\n",i,dev_call_info[i].phone_num);
                            }                                                                                                              
                            debugstring("In the for......");
                        }                                                                                                                  
                        debugstring("parse finished!!!!");
                    }
                    recieved=0;                    
                    err=m_Manage.PN_Manage_Setconfig(MODULE_WORK_ORDER,PN_CFGID_DEV_CALL_INFO_RESPONSE,(void*)&dev_call_info);                 
                }                                                                                                                          
                else{                                                                                                                       
                    FILE* fp;
                    fp=fopen("/mnt/call_info/ningbo.txt","w");
                    if(fp==NULL)
                        debugstring("Failed to open file!");
                    fclose(fp);
                    pn_dev_call_info dev_call_info[count];                                                                                 
                    dev_call_info[0].count=count;                                                                                          
                    if(strcmp((devsElement=countElement->NextSiblingElement())->Value(),"devs")==0)                                        
                    {                                                                                                                      
                        if(strcmp((devElement=devsElement->FirstChildElement())->Value(),"dev")==0)                                    
                        {                                                                                                              
                            devidElement=devElement->FirstChildElement();                                                              
                            strcpy(dev_call_info[0].dev_id,devidElement->FirstChild()->Value());                                          
                            printf("dev_id0=%s\n",dev_call_info[0].dev_id);
                            nameElement=devidElement->NextSiblingElement();                                                              
                            strcpy(dev_call_info[0].name,nameElement->FirstChild()->Value());    
                            printf("name0=%s\n",dev_call_info[0].name);
                            phonenumElement=nameElement->NextSiblingElement();                                                         
                            strcpy(dev_call_info[0].phone_num,phonenumElement->FirstChild()->Value());                                 
                            printf("phone0=%s\n",dev_call_info[0].phone_num);
                        }                                                                                                              
                        for(int i=1;i<count;i++)                                                                                           
                        {                                                                                                                  
                            if(strcmp((devElement=devElement->NextSiblingElement())->Value(),"dev")==0)                                    
                            {                                                                                                              
                                devidElement=devElement->FirstChildElement();                                                              
                                strcpy(dev_call_info[i].dev_id,devidElement->FirstChild()->Value());                                          
                                printf("dev_id%d=%s\n",i,dev_call_info[i].dev_id);
                                nameElement=devidElement->NextSiblingElement();                                                              
                                strcpy(dev_call_info[i].name,nameElement->FirstChild()->Value());    
                                printf("name%d=%s\n",i,dev_call_info[i].name);
                                phonenumElement=nameElement->NextSiblingElement();                                                         
                                strcpy(dev_call_info[i].phone_num,phonenumElement->FirstChild()->Value());                                 
                                printf("phone%d=%s\n",i,dev_call_info[i].phone_num);
                            }                                                                                                              
                            debugstring("In the for......");
                        }                                                                                                                  
                    }                                                                                                                      
                    err=m_Manage.PN_Manage_Setconfig(MODULE_WORK_ORDER,PN_CFGID_DEV_CALL_INFO_RESPONSE,(void*)&dev_call_info);                 
                }                                                                                                                          
            }                                                                                                                              
        }                                                                                                                                  
        XmlDevSpeechNotifyAck(m_pxmlbuffer);                                                                                               
        callback_send(OK,m_pxmlbuffer,m_inst);                                                                                             
        return err;                                                                                                                        
    }                        
#endif
    if (strcmp((RootElement=XmlDoc.RootElement())->Value(),"dev_speechpn_notify")==0)                                                        
    {                          
        debugstring("In dev_speechpn_notify");
        if(strcmp((countElement=RootElement->FirstChildElement())->Value(),"count")==0)                                                
        {                                               
            if(strcmp(countElement->FirstChild()->Value(),"0")==0)                                                                         
            {                                                                                                                              
                pn_dev_call_info dev_call_info;                                                                                            

                dev_call_info.count=count;                                                                                                 
                err=m_Manage.PN_Manage_Setconfig(MODULE_WORK_ORDER,PN_CFGID_DEV_CALL_INFO_RESPONSE,(void*)&dev_call_info);                 
                if(err==PN_ERR_OK)                                                                                                         
                {                                                                                                                          
                XmlDevSpeechNotifyAck(m_pxmlbuffer);                                                                                   
                callback_send(OK,m_pxmlbuffer,m_inst);                                                                                 
                }                                                                                                                          
                return err;                                                                                                                
            }                                                                                                                              
            else{                                                                                                                          
                strcpy(temp_cnt,countElement->FirstChild()->Value());                                                                      
                count=atoi(temp_cnt);       
                debugint(count);                
                    pn_dev_call_info dev_call_info[count];                                                                                     
                    debugstring("in this way==========================================");

                    dev_call_info[0].count=count;
                    if(strcmp((devsElement=countElement->NextSiblingElement())->Value(),"devs")==0)                                        
                    {                                                                                                                      
                        if(strcmp((devElement=devsElement->FirstChildElement())->Value(),"dev")==0)                                    
                        {                                                                                                              
                            devidElement=devElement->FirstChildElement();                                                              
                            strcpy(dev_call_info[0].dev_id,devidElement->FirstChild()->Value());                                          
                            printf("dev_id0=%s\n",dev_call_info[0].dev_id);
                            nameElement=devidElement->NextSiblingElement();                                                              
                            strcpy(dev_call_info[0].name,nameElement->FirstChild()->Value());    
                            printf("name0=%s\n",dev_call_info[0].name);
                            phonenumElement=nameElement->NextSiblingElement();                                                         
                            strcpy(dev_call_info[0].phone_num,phonenumElement->FirstChild()->Value());                                 
                            printf("phone0=%s\n",dev_call_info[0].phone_num);
                        }                                                                                                              
                        for(int i=1;i<count;i++)                                                                                           
                        { 
                            if(strcmp((devElement=devElement->NextSiblingElement())->Value(),"dev")==0)                                    
                            {                                                                                                              
                                devidElement=devElement->FirstChildElement();                                                              
                                strcpy(dev_call_info[i].dev_id,devidElement->FirstChild()->Value());                                          
                                printf("dev_id%d=%s\n",i,dev_call_info[i].dev_id);
                                nameElement=devidElement->NextSiblingElement();                                                              
                                strcpy(dev_call_info[i].name,nameElement->FirstChild()->Value());    
                                printf("name%d=%s\n",i,dev_call_info[i].name);
                                phonenumElement=nameElement->NextSiblingElement();                                                         
                                strcpy(dev_call_info[i].phone_num,phonenumElement->FirstChild()->Value());                                 
                                printf("phone%d=%s\n",i,dev_call_info[i].phone_num);
                            }                                                                                                              
                            debugstring("In the for......");
                        }                                                                                
                        debugstring("parse finished!!!!");
                    }
                    err=m_Manage.PN_Manage_Setconfig(MODULE_WORK_ORDER,PN_CFGID_DEV_CALL_INFO_RESPONSE,(void*)&dev_call_info);                 
                    XmlDevSpeechNotifyAck(m_pxmlbuffer);                                                                                               
                    callback_send(OK,m_pxmlbuffer,m_inst);               
                    return err; 
            }                                                                                                                              
        }                                                                                                                                  
    }

    if ((pNode_root = XmlDoc.FirstChild("subscribe_speechpn_response")) != NULL)
    {
        debugstring("enter the subscribe_speechpn_response");
        pNode_child = pNode_root->FirstChildElement("code");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        
        if(strcmp(szXmlVaule,"200")==0)
        {
            debugstring("*****************************************");
            FILE* fp;
            fp=fopen("/mnt/call_info/ningbo.txt","w");
            if(fp==NULL)
                debugstring("Failed to open file!");
            fclose(fp);
        }
    }


    // receive the sip_call invite
    if ((pNode_root = XmlDoc.FirstChild("speech")) != NULL)
    {
        pNode_child = pNode_root->FirstChildElement("audio");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.audio_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("kbps");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.kbps_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("peer");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.connect_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("from_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.from_number,szXmlVaule);

        pNode_child =pNode_child->NextSibling("to_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.to_number,szXmlVaule);

        pNode_child =pNode_child->NextSibling("channelid");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.channelid,szXmlVaule);

        pNode_child =pNode_child->NextSibling("magic");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.magic_value,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig (MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_INVITED, (void*)&audio_invite_info);
        return err;
    }

    // receive the sip_call cancel
    if ((pNode_root = XmlDoc.FirstChild("speech_cancel")) != NULL)
    {
        pNode_child = pNode_root->FirstChildElement("from_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.from_number,szXmlVaule);

        pNode_child =pNode_child->NextSibling("to_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.to_number,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig (MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_CANCEL, (void*)&audio_invite_info);
        if(err==PN_ERR_OK)
        {
            XmlAudioCancelAck(&audio_invite_info,m_pxmlbuffer);
            callback_send(OK,m_pxmlbuffer,m_inst);
            usleep(5000);
            XmlAudioInviteAck(&audio_invite_info,m_pxmlbuffer);
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        m_Manage.PN_Manage_Control(MODULE_MEDIA, PN_CFGID_MEDIA_SIPCALL_STOP,NULL);

        return err;
    }

    // receive the sip_call speech response
    if ((pNode_root = XmlDoc.FirstChild("speech_response")) != NULL)
    {
        debugstring("enter the speech_response");
        pNode_child = pNode_root->FirstChildElement("code");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.sipcall_code,szXmlVaule);

        pNode_child = pNode_child->NextSibling("audio");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.audio_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("kbps");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.kbps_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("peer");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.connect_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("channelid");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.channelid,szXmlVaule);

        pNode_child =pNode_child->NextSibling("magic");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.magic_value,szXmlVaule);

        pNode_child =pNode_child->NextSibling("from_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.from_number,szXmlVaule);

        pNode_child =pNode_child->NextSibling("to_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.to_number,szXmlVaule);
        debugstring("start to set invite config");
        err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_INVITE, (void*)&audio_invite_info);

        if(err == PN_ERR_OK)
            err = m_Manage.PN_Manage_Control(MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_START,NULL);
        else
            err = m_Manage.PN_Manage_Control(MODULE_MEDIA, PN_CFGID_MEDIA_SIPCALL_STOP,NULL);

        return err;
    }

    // receive the sip_call bye
    if ((pNode_root = XmlDoc.FirstChild("speech_bye")) != NULL)
    {
        pNode_child =pNode_root->FirstChildElement("from_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.from_number,szXmlVaule);

        pNode_child =pNode_child->NextSibling("to_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(audio_invite_info.to_number,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_BYE, (void*)&audio_invite_info);
        XmlAudioByeAck(&audio_invite_info,m_pxmlbuffer);
        callback_send(OK,m_pxmlbuffer,m_inst);
        err = m_Manage.PN_Manage_Control(MODULE_MEDIA,PN_CFGID_MEDIA_SIPCALL_STOP,NULL);
        return err;
    }
#if 0
    // receive the group_busy_invite
    if ((pNode_root = XmlDoc.FirstChild("group_busy_invite")) != NULL)
    {
        pNode_child =pNode_root->FirstChildElement("phone_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(group_busy_invite_info.phone_number,szXmlVaule);

        pNode_child =pNode_child->NextSibling("group_number");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(group_busy_invite_info.group_number,szXmlVaule);

        pNode_child =pNode_child->NextSibling("dev_id");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(group_busy_invite_info.dev_id,szXmlVaule);

        XmlGroupBusyInviteAck(m_pxmlbuffer);
        callback_send(OK,m_pxmlbuffer,m_inst);
        err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_GROUP_BUSY_INVITE, (void*)&group_busy_invite_info);
        return err;
    }
#endif
    if ((pNode_root = XmlDoc.FirstChild("ftpinfo_query_response")) != NULL)
    {
        debugstring("enter the ftpinfo_query_response!");
        pNode_child =pNode_root->FirstChildElement("result");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(ftp_info.result,szXmlVaule);

        pNode_child =pNode_child->NextSibling("server_ip");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(ftp_info.server_ip,szXmlVaule);

        pNode_child =pNode_child->NextSibling("username");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(ftp_info.user_name,szXmlVaule);

        pNode_child =pNode_child->NextSibling("pwd");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(ftp_info.user_passwd,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_FTP,PN_CFGID_FTP_USER_INFO, (void *)&ftp_info);
        return err;
    }

    if ((pNode_root = XmlDoc.FirstChild("file_upload_response")) != NULL)
    {
        debugstring("enter the ftpinfo_query_response!");
        pNode_child =pNode_root->FirstChildElement("result");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(ftp_info.result,szXmlVaule);

        pNode_child =pNode_child->NextSibling("file_name");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(ftp_info.file_name,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_FTP,PN_CFGID_FTP_UPLOAD_FILE, (void *)&ftp_info);
        return err;
    }

    if ((pNode_root = XmlDoc.FirstChild("wifi_query_response")) != NULL)
    {
        debugstring("enter the ftpindo_query_response!");
        pNode_child =pNode_root->FirstChildElement("wifi_ssid");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(work_order_info.wifi_ssid,szXmlVaule);

        pNode_child =pNode_child->NextSibling("wifi_pwd");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(work_order_info.wifi_passwd,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_WORK_ORDER,PN_CFGID_WIFI_INFO_RESPONSE, (void *)&work_order_info);
        return err;
    }

    if ((pNode_root = XmlDoc.FirstChild("sw_update_response")) != NULL)
    {
        debugstring("enter the software update response!");
        pNode_child =pNode_root->FirstChildElement("dm365_app");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(ftp_info.dm365_app,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_FTP,PN_CFGID_FTP_SOFTWARE_UPDATE, (void *)&ftp_info);
        return err;
    }

    // receive the query command
    // inlcude: MotoInfo  SysTime  DeviceInfo  MediaInfo
    //         ServerInfo NetInfo  MemoryInfo  RecordInfo AlarmInfo
    if ((pNode_root = XmlDoc.FirstChild("query")) != NULL)
    {
        XmlDoQuery(pNode_root);
    }

    // receive the config command
    // inlcude: MotoInfo  SysTime  DeviceInfo  MediaInfo
    //  ServerInfo   RecordInfo AlarmInfo
    if ((pNode_root = XmlDoc.FirstChild("config")) != NULL)
    {
        XmlDoConfig(pNode_root);
    }

    // receive the control command
    if ((pNode_root = XmlDoc.FirstChild("control")) != NULL)
    {
        XmlDoControl(pNode_root);
    }

    return PN_ERR_OK;
}

int CPnxml::XmlDoQuery(TiXmlNode* pNode_root)
{
    int err;
    TiXmlNode* pNode_child = NULL;
    TiXmlElement *spElement = NULL;
    const char * szXmlVaule = NULL;

    pn_media_info media_info;
    pn_rtc_time_info rtc_time_info;
    pn_sysinfo_dev sysinfo_dev;
    pn_sysinfo_servers sysinfo_servers;
    pn_sysinfo_net  sysinfo_net;
    pn_record_memory_info record_memory_info;
    pn_record_config_info record_config_info;
    pn_record_files_info record_files_info;
    pn_record_time record_time;
    // pn_record_ftp_info  record_ftp_info;

    memset(&media_info,'\0',sizeof(pn_media_info));
    memset(&rtc_time_info,'\0',sizeof(pn_rtc_time_info));
    memset(&sysinfo_dev,'\0',sizeof(pn_sysinfo_dev));
    memset(&sysinfo_servers,'\0',sizeof(pn_sysinfo_servers));
    memset(&sysinfo_net,'\0',sizeof(pn_sysinfo_net));
    memset(&record_memory_info,'\0',sizeof(pn_record_memory_info));
    memset(&record_config_info,'\0',sizeof(pn_record_config_info));
    memset(&record_files_info,'\0',sizeof(pn_record_files_info));
    memset(&record_time,'\0',sizeof(pn_record_time));
    // memset(&record_ftp_info,'\0',sizeof(pn_record_ftp_info));

    pNode_child = pNode_root->FirstChildElement("variable");

    if (NULL == pNode_child)
    {
        return PN_ERR_INVALID_DATA;
    }
    spElement = pNode_child->ToElement();
    szXmlVaule = spElement->GetText();

    if(szXmlVaule==NULL)
        return PN_ERR_INVALID_DATA;

    if(strcmp(szXmlVaule,"SysTime") == 0)
    {
        err=m_Manage.PN_Manage_Getconfig(MODULE_RTC,PN_CFGID_RTC_TIME,&rtc_time_info,NULL);
        XmlSysTimeQueryAck(&rtc_time_info,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
    }

    if(strcmp(szXmlVaule,"MediaInfo_Video") == 0)
    {
        err=m_Manage.PN_Manage_Getconfig(MODULE_MEDIA,PN_CFGID_MEDIA_VIDEO,&media_info.video_info,NULL);
        XmlMediaVideoQueryAck(&media_info.video_info,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
    }

    if(strcmp(szXmlVaule,"MediaInfo_Audio") == 0)
    {
        err=m_Manage.PN_Manage_Getconfig(MODULE_MEDIA,PN_CFGID_MEDIA_AUDIO,&media_info.audio_info,NULL);
        XmlMediaAudioQueryAck(&media_info.audio_info,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
    }

    if(strcmp(szXmlVaule,"MediaInfo_Label") == 0)
    {
        err=m_Manage.PN_Manage_Getconfig(MODULE_MEDIA,PN_CFGID_MEDIA_LABEL,&media_info.label_info,NULL);
        XmlMediaLabelQueryAck(&media_info.label_info,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
    }

    if(strcmp(szXmlVaule,"DeviceInfo") == 0)
    {
        err=m_Manage.PN_Manage_Getconfig(MODULE_SYSINFO,PN_CFGID_SYSINFO_DEV,&sysinfo_dev,NULL);
        XmlSysDevQueryAck(&sysinfo_dev,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);

        }
    }

    if(strcmp(szXmlVaule,"ServerInfo") == 0)
    {

        err=m_Manage.PN_Manage_Getconfig(MODULE_SYSINFO,PN_CFGID_SYSINFO_SERVERS,&sysinfo_servers,NULL);
        XmlSysServerQueryAck(&sysinfo_servers,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
    }

    if(strcmp(szXmlVaule,"NetInfo") == 0)
    {
        err=m_Manage.PN_Manage_Getconfig(MODULE_SYSINFO,PN_CFGID_SYSINFO_NET,&sysinfo_net,NULL);
        XmlSysNetQueryAck(&sysinfo_net,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
    }

    if(strcmp(szXmlVaule,"MemoryInfo") == 0)
    {
        err=m_Manage.PN_Manage_Getconfig(MODULE_RECORD,PN_CFGID_RECORD_MEMORY,&record_memory_info,NULL);
        XmlRecMemoryQueryAck(&record_memory_info,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
    }

    if(strcmp(szXmlVaule,"RecordConfig") == 0)
    {
        err=m_Manage.PN_Manage_Getconfig(MODULE_RECORD,PN_CFGID_RECORD_CONFIG,&record_config_info,NULL);
        XmlRecConfigQueryAck(&record_config_info,err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
    }

    if(strcmp(szXmlVaule,"RecordInfo") == 0)
    {
        pNode_child =pNode_child->NextSibling("command");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();

        if(szXmlVaule==NULL)
            return PN_ERR_INVALID_DATA;

        record_files_info.type=*szXmlVaule;

        switch(*szXmlVaule)
        {
            case 'y':
                err=m_Manage.PN_Manage_Getconfig(MODULE_RECORD,PN_CFGID_RECORD_GETYEARS,&record_files_info,NULL);
                break;
            case 'm':

                pNode_child =pNode_child->NextSibling("year");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.year,szXmlVaule);

                err=m_Manage.PN_Manage_Getconfig(MODULE_RECORD,PN_CFGID_RECORD_GETMONTHS,&record_files_info,&record_time);
                break;
            case 'd':
                pNode_child =pNode_child->NextSibling("year");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.year,szXmlVaule);

                pNode_child =pNode_child->NextSibling("month");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.month,szXmlVaule);

                err=m_Manage.PN_Manage_Getconfig(MODULE_RECORD,PN_CFGID_RECORD_GETDAYS,&record_files_info,&record_time);
                break;
            case 'h':

                pNode_child =pNode_child->NextSibling("year");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.year,szXmlVaule);

                pNode_child =pNode_child->NextSibling("month");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.month,szXmlVaule);

                pNode_child =pNode_child->NextSibling("day");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.day,szXmlVaule);

                err=m_Manage.PN_Manage_Getconfig(MODULE_RECORD,PN_CFGID_RECORD_GETHOURS,&record_files_info,&record_time);
                break;
            case 'f':

                pNode_child =pNode_child->NextSibling("year");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.year,szXmlVaule);

                pNode_child =pNode_child->NextSibling("month");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.month,szXmlVaule);

                pNode_child =pNode_child->NextSibling("day");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.day,szXmlVaule);

                pNode_child =pNode_child->NextSibling("hour");
                if (NULL == pNode_child)
                {
                    return PN_ERR_INVALID_DATA;
                }
                spElement = pNode_child->ToElement();
                szXmlVaule = spElement->GetText();
                if(szXmlVaule!=NULL)
                    strcpy(record_time.hour,szXmlVaule);

                err=m_Manage.PN_Manage_Getconfig(MODULE_RECORD,PN_CFGID_RECORD_GETFILES,&record_files_info,&record_time);
                break;
            default:
                err=PN_ERR_INVALID_DATA;
                break;
        }

        XmlRecFilesQueryAck(&record_files_info,err,m_pxmlbuffer);
        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }

        return err;
    }

    return PN_ERR_OK;
}

int CPnxml::XmlDoConfig(TiXmlNode* pNode_root)
{
    int err=PN_ERR_OK;
    TiXmlNode* pNode_child = NULL;
    TiXmlElement *spElement = NULL;
    const char * szXmlVaule = NULL;

    pn_media_info media_info;
    pn_rtc_time_info rtc_time_info;
    pn_sysinfo_dev sysinfo_dev;
    pn_sysinfo_servers sysinfo_servers;
    pn_sysinfo_net  sysinfo_net;
    pn_record_memory_info record_memory_info;
    pn_record_config_info record_config_info;

    memset(&media_info,'\0',sizeof(pn_media_info));
    memset(&rtc_time_info,'\0',sizeof(pn_rtc_time_info));
    memset(&sysinfo_dev,'\0',sizeof(pn_sysinfo_dev));
    memset(&sysinfo_servers,'\0',sizeof(pn_sysinfo_servers));
    memset(&sysinfo_net,'\0',sizeof(pn_sysinfo_net));
    memset(&record_memory_info,'\0',sizeof(pn_record_memory_info));
    memset(&record_config_info,'\0',sizeof(pn_record_config_info));

    pNode_child = pNode_root->FirstChildElement("variable");
    if (NULL == pNode_child)
    {
        return PN_ERR_INVALID_DATA;
    }
    spElement = pNode_child->ToElement();
    szXmlVaule = spElement->GetText();

    if(szXmlVaule==NULL)
        return PN_ERR_INVALID_DATA;

    if(strcmp(szXmlVaule,"SysTime") == 0)
    {
        pNode_child =pNode_child->NextSibling("time");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        //"20100706-12:10:00"

        if(szXmlVaule!=NULL)
            err=TimeChangeFormt(szXmlVaule,&rtc_time_info);

        if(err== PN_ERR_OK)
            err=m_Manage.PN_Manage_Setconfig(MODULE_RTC,0,&rtc_time_info);

        XmlConfigAck("SysTime",err,m_pxmlbuffer);
        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }

        return err;
    }

    if(strcmp(szXmlVaule,"MediaInfo_Video") == 0)
    {
        // part 1  : video info
        pNode_child =pNode_child->NextSibling("video");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule==NULL)
            goto media_video_back;

        if(strcmp(szXmlVaule,"H.264") == 0)
        {
            media_info.video_info.type = 0;
        }
        else if(strcmp(szXmlVaule,"MPEG4") == 0)
        {
            media_info.video_info.type = 1;
        }
        else
        {
            debugstring("MediaInfo video error!");
            err=PN_ERR_INVALID_DATA;
            goto media_video_back;
        }

        pNode_child =pNode_child->NextSibling("resolution");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule==NULL)
            goto media_video_back;

        if(strcmp(szXmlVaule,"CIF") == 0)
        {
            media_info.video_info.format = 0;
        }
        else if(strcmp(szXmlVaule,"D1") == 0)
        {
            media_info.video_info.format= 1;
        }
        else
        {
            debugstring("MediaInfo resolution error!");
            err=PN_ERR_INVALID_DATA;
            goto media_video_back;
        }

        pNode_child =pNode_child->NextSibling("framerate");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.video_info.framerate= atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("bitrate");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.video_info.bitrate= atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("bright");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.video_info.bright= atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("contrast");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.video_info.contrast= atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("saturation");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.video_info.saturation= atoi(szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_VIDEO,&media_info.video_info);

media_video_back:

        XmlConfigAck("MediaInfo_Video",err,m_pxmlbuffer);
        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }

        return err;
    }

    if(strcmp(szXmlVaule,"MediaInfo_Audio") == 0)
    {
        // part 2  : audio info
        pNode_child =pNode_child->NextSibling("audio");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule==NULL)
            goto media_audio_back;

        if(strcmp(szXmlVaule,"G.722") == 0)
        {
            media_info.audio_info.type= 0;

        }
        else
        {
            debugstring("MediaInfo audio error!");
            err=PN_ERR_INVALID_DATA;
            goto media_audio_back;
        }

        pNode_child =pNode_child->NextSibling("channel");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.audio_info.nchannel= atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("bitrate");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.audio_info.bitrate= atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("samplerate");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.audio_info.samplerate= atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("samplebits");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            media_info.audio_info.samplebits= atoi(szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_AUDIO,&media_info.audio_info);

media_audio_back:
        XmlConfigAck("MediaInfo_Audio",err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        return err;
    }

    if(strcmp(szXmlVaule,"MediaInfo_Label") == 0)
    {
        // part3  : label info
        pNode_child =pNode_child->NextSibling("labeltime");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule==NULL)
            goto media_label_back;

        if(strcmp(szXmlVaule,"on") == 0)
        {
            media_info.label_info.labeltime = 0;
        }
        else if(strcmp(szXmlVaule,"off") == 0)
        {
            media_info.label_info.labeltime = 1;
        }
        else
        {
            debugstring("MediaInfo_Label  error");
            err=PN_ERR_INVALID_DATA;
            goto media_label_back;
        }

        pNode_child =pNode_child->NextSibling("labelgps");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule==NULL)
            goto media_label_back;

        if(strcmp(szXmlVaule,"on") == 0)
        {
            media_info.label_info.labelgps= 0;
        }
        else if(strcmp(szXmlVaule,"off") == 0)
        {
            media_info.label_info.labelgps = 1;
        }
        else
        {
            debugstring("MediaInfo_Label  error!");
            err=PN_ERR_INVALID_DATA;
            goto media_label_back;
        }

        err=m_Manage.PN_Manage_Setconfig(MODULE_MEDIA,PN_CFGID_MEDIA_LABEL,&media_info.label_info);
media_label_back:
        XmlConfigAck("MediaInfo_Label",err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        return err;
    }

    if(strcmp(szXmlVaule,"DeviceInfo") == 0)
    {
        pNode_child =pNode_child->NextSibling("manufacturer");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_dev.dev_manufacturer,szXmlVaule);

        pNode_child =pNode_child->NextSibling("model");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_dev.dev_model,szXmlVaule);

        pNode_child =pNode_child->NextSibling("firmware");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_dev.dev_firmware,szXmlVaule);

        pNode_child =pNode_child->NextSibling("maxcamera");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            sysinfo_dev.dev_maxcamera = atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("name");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_dev.dev_name,szXmlVaule);

        pNode_child =pNode_child->NextSibling("id");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_dev.dev_id,szXmlVaule);

        pNode_child =pNode_child->NextSibling("password");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_dev.dev_pwd,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_SYSINFO,PN_CFGID_SYSINFO_DEV,&sysinfo_dev);

        XmlConfigAck("DeviceInfo",err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        return err;
    }

    if(strcmp(szXmlVaule,"ServerInfo") == 0)
    {
        pNode_child =pNode_child->NextSibling("servername");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_servers.serv_name,szXmlVaule);

        pNode_child =pNode_child->NextSibling("serverid");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_servers.serv_id,szXmlVaule);

        pNode_child =pNode_child->NextSibling("serverip");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_servers.serv_ip,szXmlVaule);

        pNode_child =pNode_child->NextSibling("serverport");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_servers.serv_port,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_SYSINFO,PN_CFGID_SYSINFO_SERVERS,&sysinfo_servers);

        XmlConfigAck("ServerInfo",err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        return err;
    }

    if(strcmp(szXmlVaule,"NetInfo") == 0)
    {
        pNode_child =pNode_child->NextSibling("ip");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_net.ip,szXmlVaule);

        pNode_child =pNode_child->NextSibling("mask");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_net.mask,szXmlVaule);

        pNode_child =pNode_child->NextSibling("gateway");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_net.gateway,szXmlVaule);

        pNode_child =pNode_child->NextSibling("dns");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_net.DNS,szXmlVaule);

        pNode_child =pNode_child->NextSibling("type");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            strcpy(sysinfo_net.type,szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_SYSINFO,PN_CFGID_SYSINFO_NET,&sysinfo_net);

        XmlConfigAck("NetInfo",err,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        return err;
    }

    if(strcmp(szXmlVaule,"RecordConfig") == 0)
    {
        pNode_child =pNode_child->NextSibling("state");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule==NULL)
            goto record_config_back;

        if(strcmp(szXmlVaule,"on")==0)
            record_config_info.state=0;
        else if(strcmp(szXmlVaule,"off")==0)
            record_config_info.state=1;
        else
            goto record_config_back;

        pNode_child =pNode_child->NextSibling("recformat");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule==NULL)
            goto record_config_back;

        if(strcmp(szXmlVaule,"CIF")==0)
            record_config_info.file_type=0;
        else if(strcmp(szXmlVaule,"D1")==0)
            record_config_info.file_type=1;
        else
            goto record_config_back;

        pNode_child =pNode_child->NextSibling("recsize");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            record_config_info.file_length=atoi(szXmlVaule);

        err=m_Manage.PN_Manage_Setconfig(MODULE_RECORD,PN_CFGID_RECORD_CONFIG,&record_config_info);
record_config_back  :
        XmlConfigAck("RecordConfig",err,m_pxmlbuffer);
        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        return err;
    }

    return PN_ERR_OK;
}

int CPnxml::XmlDoControl(TiXmlNode* pNode_root)
{
    int err;
    TiXmlNode* pNode_child = NULL;
    TiXmlElement *spElement = NULL;
    const char * szXmlVaule = NULL;

    pNode_child = pNode_root->FirstChildElement("variable");
    if (NULL == pNode_child)
    {
        return PN_ERR_INVALID_DATA;
    }
    spElement = pNode_child->ToElement();
    szXmlVaule = spElement->GetText();

    if(strcmp(szXmlVaule,"RecordCommand") == 0)
    {
        int recordcommand = -1;
        char file[1024];
        memset(file,0,sizeof(file));

        pNode_child =pNode_child->NextSibling("command");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();
        if(szXmlVaule!=NULL)
            recordcommand = atoi(szXmlVaule);

        pNode_child =pNode_child->NextSibling("filename");
        if (NULL == pNode_child)
        {
            return PN_ERR_INVALID_DATA;
        }
        spElement = pNode_child->ToElement();
        szXmlVaule = spElement->GetText();

        if(szXmlVaule!=NULL)
        {
            if(strlen(szXmlVaule)>=sizeof(file))
                memcpy(file,szXmlVaule,sizeof(file));
            else
                strcpy(file,szXmlVaule);

            if(file[strlen(file)-1]!=' ')
                file[strlen(file)]=' ';
        }

        XmlControlAck("RecordCommand",recordcommand, PN_ERR_OK,m_pxmlbuffer);

        if(callback_send)
        {
            callback_send(OK,m_pxmlbuffer,m_inst);
        }
        memset(m_pxmlbuffer,'\0',sizeof(m_pxmlbuffer));

        err=m_Manage.PN_Manage_Control(MODULE_RECORD, PN_CFGID_RECORD_UPDATEFILES, file);
        //  switch(recordcommand)
        //  {
        //      case 0:
        //          //err=m_Manage.PN_Manage_Control(MODULE_RECORD, PN_CFGID_RECORD_ON, NULL);
        //          break;
        //      case 1:
        //          err=m_Manage.PN_Manage_Control(MODULE_RECORD, PN_CFGID_RECORD_OFF, NULL);
        //          break;
        //      case 2:
        //
        //          break;
        //      case 3:
        //
        //          break;
        //      default:
        //          debugstring("recordcommand error!");
        //          err=PN_ERR_INVALID_DATA;
        //  }

        return err;
    }

    return err;
}

int CPnxml::XmlDevSpeechNotifyAck(char * msg)                                                                                                   
{                                                                                                                                               
    char buffer[XMLMAXLEN];                                                                                                                     
    memset(buffer,'\0',sizeof(buffer));                                                                                                         

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"                                                                                                  
            "<dev_speechpn_notify_response>\n"                                                                                                    
            "<code>200</code>\n"                                                                                                                
            "</dev_speechpn_notify_response>"                                                                                                     
           );                                                                                                                                  

    memset(msg,'\0',XMLMAXLEN);                                                                                                                 
    memcpy(msg,buffer,strlen(buffer));                                                                                                          
    return PN_ERR_OK;                                                                                                                           
}          

#if 0
int CPnxml::XmlGroupBusyInviteAck(char * msg)                                                                                                   
{                                                                                                                                               
    char buffer[XMLMAXLEN];                                                                                                                     
    memset(buffer,'\0',sizeof(buffer));                                                                                                         

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"                                                                                                  
            "<group_busy_response>\n"                                                                                                    
            "<code>200</code>\n"                                                                                                                
            "</group_busy_response>"                                                                                                     
           );                                                                                                                                  

    memset(msg,'\0',XMLMAXLEN);                                                                                                                 
    memcpy(msg,buffer,strlen(buffer));                                                                                                          
    return PN_ERR_OK;                                                                                                                           
}          

#endif
int CPnxml::XmlMediaInviteAck(pn_media_invite_info *media_invite_info,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<media><resolution>%s</resolution>\n"
            "<video>%s</video>\n"
            "<audio>%s</audio>\n"
            "<kbps>%s</kbps>\n"
            "<self>%s</self>\n"
            "<mode>%s</mode>\n"
            "<magic>%s</magic></media>",
            media_invite_info->resolution_value,
            media_invite_info->video_value,
            media_invite_info->audio_value,
            media_invite_info->kbps_value,
            media_invite_info->connect_value,
            media_invite_info->mode_value,
            media_invite_info->magic_value);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlMediaByeAck(pn_media_invite_info *media_invite_info,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<media_bye_response>\n"
            "<resolution>%s</resolution>\n"
            "<video>%s</video>\n"
            "</media_bye_response>",
            media_invite_info->resolution_value,
            media_invite_info->video_value);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlAudioInviteAck(pn_audio_invite_info *audio_invite_info,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<speech_response>\n"
            "<code>%s</code>\n"
            "<from_number>%s</from_number>\n"
            "<to_number>%s</to_number>\n"
            "</speech_response>",
            audio_invite_info->sipcall_code,
            audio_invite_info->from_number,
            audio_invite_info->to_number);
    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlAudioCancelAck(pn_audio_invite_info *audio_invite_info,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<speech_cancel_response>\n"
            "<code>%s</code>\n"
            "<from_number>%s</from_number>\n"
            "<to_number>%s</to_number>\n"
            "</speech_cancel_response>",
            audio_invite_info->cancel_code,
            audio_invite_info->from_number,
            audio_invite_info->to_number);
    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlAudioByeAck(pn_audio_invite_info *audio_invite_info,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<speech_bye_response>\n"
            "<code>200</code>\n"
            "<from_number>%s</from_number>\n"
            "<to_number>%s</to_number>\n"
            "</speech_bye_response>",
            audio_invite_info->from_number,
            audio_invite_info->to_number);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlWorkTaskAck(const char* result,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<task_response>\n"
            "<result>%s</result>\n"
            "</task_response>",
            result);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlMediaVideoQueryAck(pn_media_video_info *video_info,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    char tmp_video[10]="";
    char tmp_resolution[10]="";

    if(video_info->type == 0)
        strcpy(tmp_video,"H.264");
    else
        strcpy(tmp_video,"MPEG4");

    if(video_info->format == 1)
        strcpy(tmp_resolution,"QCIF");
    else if(video_info->format == 0)
        strcpy(tmp_resolution,"CIF");

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>MediaInfo_Video</variable>\n"
            "<result>%d</result>\n"
            "<video>%s</video>\n"
            "<resolution>%s</resolution>\n"
            "<framerate>%d</framerate>\n"
            "<bitrate>%d</bitrate>\n"
            "<bright>%d</bright>\n"
            "<contrast>%d</contrast>\n"
            "<saturation>%d</saturation>\n"
            "</query_response>",
            success,
            tmp_video,
            tmp_resolution,
            video_info->framerate,
            video_info->bitrate,
            video_info->bright,
            video_info->contrast,
            video_info->saturation);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));

    return PN_ERR_OK;
}

int CPnxml::XmlMediaAudioQueryAck(pn_media_audio_info *audio_info,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));
    char tmp_audio[10]="";

    if(audio_info->type == 0)
    {
        strcpy(tmp_audio,"G.722");
    }

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>MediaInfo_Audio</variable>\n"
            "<result>%d</result>\n"
            "<audio>%s</audio>\n"
            "<channel>%d</channel>\n"
            "<bitrate>%d</bitrate>\n"
            "<samplerate>%d</samplerate>\n"
            "<samplebits>%d</samplebits>\n"
            "</query_response>",
            success,
            tmp_audio,
            audio_info->nchannel,
            audio_info->bitrate,
            audio_info->samplerate,
            audio_info->samplebits);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));

    return PN_ERR_OK;
}

int CPnxml::XmlMediaLabelQueryAck(pn_media_label_info *label_info,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    char tmp_time[5];
    char tmp_gps[5];
    memset(buffer,'\0',sizeof(buffer));
    memset(tmp_time,'\0',sizeof(tmp_time));
    memset(tmp_gps,'\0',sizeof(tmp_gps));

    if(label_info->labeltime==0)
        strcpy(tmp_time,"on");
    else if(label_info->labeltime==1)
        strcpy(tmp_time,"off");

    if(label_info->labelgps==0)
        strcpy(tmp_gps,"on");
    else if(label_info->labeltime==1)
        strcpy(tmp_gps,"off");

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>MediaInfo_Label</variable>\n"
            "<result>%d</result>\n"
            "<labeltime>%s</labeltime>\n"
            "<labelgps>%s</labelgps>\n"
            "</query_response>",
            success,
            tmp_time,
            tmp_gps);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));

    return PN_ERR_OK;
}

int CPnxml::XmlConfigAck(const char*variable,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<config_response>\n"
            "<variable>%s</variable>\n"
            "<result>%d</result>\n"
            "</config_response>",
            variable,success);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));

    return PN_ERR_OK;
}

int CPnxml::XmlControlAck(const char*variable,int command, int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<control_response>\n"
            "<variable>%s</variable>\n"
            "<command>%d</command>\n"
            "<result>%d</result>\n"
            "</control_response>",
            variable,command,success);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));

    return PN_ERR_OK;
}

int CPnxml::XmlSysTimeQueryAck(pn_rtc_time_info *time_info,int success,char * msg)
{
    char buffer[XMLMAXLEN];

    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>SysTime</variable>\n"
            "<result>%d</result>\n"
            "<time>%s</time>\n"
            "</query_response>",
            success,
            time_info->TimeBuf);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));

    return PN_ERR_OK;
}

int CPnxml::XmlSysDevQueryAck(pn_sysinfo_dev *sysinfo_dev,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));
    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>DeviceInfo</variable>\n"
            "<result>%d</result>\n"
            "<manufacturer>%s</manufacturer>\n"
            "<model>%s</model>\n"
            "<firmware>%s</firmware>\n"
            "<maxcamera>%d</maxcamera>\n"
            "<name>%s</name>\n"
            "<id>%s</id>\n"
            "<password>%s</password>\n"
            "<online>%s</online>\n"
            "<status>%s</status>\n"
            "<record>%s</record>\n"
            "<sincestartup>%s</sincestartup>\n"
            "<sipnum>%s</sipnum>\n"
            "</query_response>",
            success,
            sysinfo_dev->dev_manufacturer,
            sysinfo_dev->dev_model,
            sysinfo_dev->dev_firmware,
            sysinfo_dev->dev_maxcamera,
            sysinfo_dev->dev_name,
            sysinfo_dev->dev_id,
            sysinfo_dev->dev_pwd,
            sysinfo_dev->dev_online,
            sysinfo_dev->dev_status,
            sysinfo_dev->dev_record,
            sysinfo_dev->dev_sincestartup,
            sysinfo_dev->dev_sipnum);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlSysServerQueryAck(pn_sysinfo_servers*sysinfo_servers,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));
    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>ServerInfo</variable>\n"
            "<result>%d</result>\n"
            "<servername>%s</servername>\n"
            "<serverid>%s</serverid>\n"
            "<serverip>%s</serverip>\n"
            "<serverport>%s</serverport>\n"
            "</query_response>",
            success,
            sysinfo_servers->serv_name,
            sysinfo_servers->serv_id,
            sysinfo_servers->serv_ip,
            sysinfo_servers->serv_port);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlSysNetQueryAck(pn_sysinfo_net*sysinfo_net,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));
    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>NetInfo</variable>\n"
            "<result>%d</result>\n"
            "<ip>%s</ip>\n"
            "<mask>%s</mask>\n"
            "<gateway>%s</gateway>\n"
            "<dns>%s</dns>\n"
            "<type>%s</type>\n"
            "</query_response>",
            success,
            sysinfo_net->ip,
            sysinfo_net->mask,
            sysinfo_net->gateway,
            sysinfo_net->DNS,
            sysinfo_net->type);
    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlRecMemoryQueryAck(pn_record_memory_info*record_memory_info,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));
    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>MemoryInfo</variable>\n"
            "<result>%d</result>\n"
            "<size>%d</size>\n"
            "<usedsize>%d</usedsize>\n"
            "<leftsize>%d</leftsize>\n"
            "</query_response>",
            success,
            record_memory_info->total_size,
            record_memory_info->used_size,
            record_memory_info->left_size);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlRecConfigQueryAck(pn_record_config_info*record_config_info,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    char tmp_state[5];
    char tmp_type[5];
    memset(buffer,'\0',sizeof(buffer));
    memset(tmp_state,'\0',sizeof(tmp_state));
    memset(tmp_type,'\0',sizeof(tmp_type));

    if(record_config_info->state==0)
        strcpy(tmp_state,"on");
    else if(record_config_info->state==1)
        strcpy(tmp_state,"off");

    if(record_config_info->file_type==0)
        strcpy(tmp_type,"CIF");
    else if(record_config_info->file_type==1)
        strcpy(tmp_type,"D1");

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>RecordConfig</variable>\n"
            "<result>%d</result>\n"
            "<state>%s</state>\n"
            "<recformat>%s</recformat>\n"
            "<recsize>%d</recsize>\n"
            "</query_response>",
            success,
            tmp_state,
            tmp_type,
            record_config_info->file_length);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::XmlRecFilesQueryAck(pn_record_files_info*record_files_info,int success,char * msg)
{
    char buffer[XMLMAXLEN];
    memset(buffer,'\0',sizeof(buffer));

    if(success==PN_ERR_OK)
        success=record_files_info->type;

    sprintf(buffer,"<?xml version=\"1.0\"?>\n"
            "<query_response>\n"
            "<variable>RecordInfo</variable>\n"
            "<result>%d</result>\n"
            "<num>%d</num>\n"
            "<list>%s</list>\n"
            "</query_response>",
            success,
            record_files_info->num,
            record_files_info->list);

    memset(msg,'\0',XMLMAXLEN);
    memcpy(msg,buffer,strlen(buffer));
    return PN_ERR_OK;
}

int CPnxml::TimeChangeFormt(const char * time ,pn_rtc_time_info *time_info)
{
    //"20100706-12:10:00"
    int err= PN_ERR_OK;

    if(strlen(time) != 17)
    {
        err = PN_ERR_INVALID_DATA;
        return err;
    }

    strncpy(time_info->year,time,4);
    strncpy(time_info->month,time+4,2);
    strncpy(time_info->day,time+6,2);
    strncpy(time_info->hour,time+9,2);
    strncpy(time_info->min,time+12,2);
    strncpy(time_info->sec,time+15,2);

    return err;
}

void CPnxml::SetCallback(SendCallback callback,void* inst)
{
    callback_send = callback;
    m_inst=inst;
}

int CPnxml::SipCall_Bye_Clean_XML_Send(char* from_num,char* to_num)
{
    char buffer[300];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
            "<bye_clean>\n"
            "<from_number>%s</from_number>\n"
            "<to_number>%s</to_number>\n"
            "</bye_clean>",from_num,to_num);
    if(callback_send!=NULL)
        callback_send(NOTIFY,buffer,m_inst);
    return 0;
}

int CPnxml::XmlGroupChangeAck()
{
    char buffer[300];
    memset(buffer,'\0',sizeof(buffer));

    sprintf(buffer,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
            "<change_dev_group_response>\n"
            "<code>200</code>\n"
            "</change_dev_group_response>");
    // memset(msg,'\0',XMLMAXLEN);    
    // memcpy(msg,buffer,strlen(buffer));
    if(callback_send!=NULL)
        callback_send(OK,buffer,m_inst);
    return PN_ERR_OK;
}    
